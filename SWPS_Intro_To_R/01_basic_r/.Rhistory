obiekt1 = 10
obiekt2 = log1p(obiekt1)^2
obiekt3 = round(obiekt2, 0)
obiekt4 = obiekt3 > obiekt2
#tutaj zapiszemy nasz kod
obiekt1 = 10
obiekt2 = log1p(obiekt1)^2
obiekt3 = round(obiekt2, 0)
obiekt4 = obiekt3 > obiekt2
#tutaj zapiszemy nasz kod
obiekt1 = 10
obiekt2 = log1p(obiekt1)^2
obiekt3 = round(obiekt2, 0)
obiekt4 = obiekt3 > obiekt2
obiekt5 = obiekt4*0
#tutaj zapiszemy nasz kod
obiekt1 = 10
obiekt2 = log1p(obiekt1)^2
obiekt3 = round(obiekt2, 0)
obiekt4 = obiekt3 > obiekt2
obiekt5 = ~obiekt4
#tutaj zapiszemy nasz kod
obiekt1 = 10
obiekt2 = log1p(obiekt1)^2
obiekt3 = round(obiekt2, 0)
obiekt4 = obiekt3 > obiekt2
obiekt5 = -obiekt4
#tutaj zapiszemy nasz kod
obiekt1 = 10
obiekt2 = log1p(obiekt1)^2
obiekt3 = round(obiekt2, 0)
obiekt4 = obiekt3 > obiekt2
obiekt5 = FALSE*obiekt4
#tutaj zapiszemy nasz kod
obiekt1 = 10
obiekt2 = log1p(obiekt1)^2
obiekt3 = round(obiekt2, 0)
obiekt4 = obiekt3 > obiekt2
obiekt5 = FALSE+obiekt4
obiekt5
#tutaj zapiszemy nasz kod
obiekt1 = 10
obiekt2 = log1p(obiekt1)^2
obiekt3 = round(obiekt2, 0)
obiekt4 = obiekt3 > obiekt2
obiekt5 = FALSE*obiekt4
obiekt5
?log1p
#tutaj zapiszemy nasz kod
obiekt1 = 10
obiekt2 = log1p(obiekt1)^2
obiekt3 = round(obiekt2, 0)
obiekt4 = obiekt3 > obiekt2
obiekt5 = FALSE*obiekt4
#pomoc dot. funkcji
?log1p
help("round")
8 / 3
#tutaj zapiszemy nasz kod
obiekt1 = 10
obiekt2 = log1p(obiekt1)^2
obiekt3 = round(obiekt2, 0)
obiekt4 = obiekt3 > obiekt2
obiekt5 = FALSE*obiekt4
#pomoc dot. funkcji
?log1p
help("round")
#obiekty mogą być tekstowe
zdanie1 = "Ala ma"
zdanie2 = "kota"
zdanie3 = paste(zdanie1, zdanie2, sep=" ")
zdanie3
lower(zdanie3)
tolower(zdanie3)
toupper(zdanie3)
toString(12)
#tutaj zapiszemy nasz kod
obiekt1 = 10
obiekt2 = log1p(obiekt1)^2
obiekt3 = round(obiekt2, 0)
obiekt4 = obiekt3 > obiekt2
obiekt5 = FALSE*obiekt4
#pomoc dot. funkcji
?log1p
help("round")
#obiekty mogą być tekstowe
zdanie1 = "Ala ma"
zdanie2 = "kota"
zdanie3 = paste(zdanie1, zdanie2, sep=" ")
zdanie3_male = tolower(zdanie3)
zdanie3_duze = toupper(zdanie3)
print(zdanie3_duze)
integer("12")
as.integer("12")
#tutaj zapiszemy nasz kod
obiekt1 = 10
obiekt2 = log1p(obiekt1)^2
obiekt3 = round(obiekt2, 0)
obiekt4 = obiekt3 > obiekt2
obiekt5 = FALSE*obiekt4
#pomoc dot. funkcji
?log1p
help("round")
#obiekty mogą być tekstowe
zdanie1 = "Ala ma"
zdanie2 = "kota"
zdanie3 = paste(zdanie1, zdanie2, sep=" ")
zdanie3_male = tolower(zdanie3)
zdanie3_duze = toupper(zdanie3)
#konwersja typów
obiekt6 = "12"
obiekt7 = 12
obiekt6 + 5
obiekt7 + 12
#konwersja typów
obiekt6 = "12"
obiekt7 = 12
print(obiekt6+1)
print(obiekt7+1)
print(obiekt6+1)
print(obiekt7+1)
obiekt6_liczbowy = as.int(obiekt6)
obiekt6_liczbowy = as.integer(obiekt6)
print(obiekt6_liczbowy+1)
date
date()
install.packages("date")
library("date", lib.loc="~/R/win-library/3.3")
zdanie3
#tutaj zapiszemy nasz kod
obiekt1 = 10
obiekt2 = log1p(obiekt1)^2
obiekt3 = round(obiekt2, 0)
obiekt4 = obiekt3 > obiekt2
obiekt5 = FALSE*obiekt4
#pomoc dot. funkcji
?log1p
help("round")
#obiekty mogą być tekstowe
zdanie1 = "Ala ma"
zdanie2 = "kota"
zdanie3 = paste(zdanie1, zdanie2, sep=" ")
zdanie3_male = tolower(zdanie3)
zdanie3_duze = toupper(zdanie3)
#konwersja typów
obiekt6 = "12"
obiekt7 = 12
print(obiekt6+1)
print(obiekt7+1)
obiekt6_liczbowy = as.integer(obiekt6)
print(obiekt6_liczbowy+1)
zdanie4 = paste(zdanie3,"oraz",as.character(3),"psy", sep=" ")
zdanie4
obiekt6 * 8
x1= 41414134141
x2 = "50"
x3 = TRUE
x4 = "Choć mieli do pokonania"
as.integer(x3)
as.array(12,13,14)
c(12,13,14)
as.array(12)
c(12,13,14)
1:100
c("ala","ma","kota")
c("ala","ma","kota")[1]
c("ala","ma","kota")[2]
c("ala","ma","kota")[3]
for (i in c("ala","ma","kota")): {
print i
}
for (i in c("ala","ma","kota")) {
print i
}
for i in c("ala","ma","kota") {
print i
}
for i in (1:3) {
print i
}
for (i in 1:3) {
print i
}
for (i in 1:3) {
print(i)
}
x = 1:100
x * 4
wektor1 = c(1,2,3,4,5,10,50,80,1000)
wektor1[1:3]
wektor1[-1]
wektor1[2:100]
len(wektor1)
length(wektor1)
wektor1 = c(1,2,3,4,5,10,50,80,1000)
print(sum(wektor1))
print(avg(wektor1))
print(sum(wektor1))
print(mean(wektor1))
print(median(wektor1))
hist(wektor1)
hist.default(wektor1)
wektor1 = c(1,2,3,4,5,10,50,80,1000)
print(sum(wektor1))
print(mean(wektor1))
print(median(wektor1))
hist(wektor1)
c(1,100,5)
sort(c(1,100,5))
wektor2 = log1p(wektor1)
wektor2
hist(wektor2)
wektor2 = log1p(wektor1)
wektor2
scale(wektor1)
wektor3 = scale(c(1:100))
wektor3
wektor4 = scale(c(101:200))
wektor3 == wektor4
wektor3 is wektor4
setdiff(wektor3,wektor4)
lenght(setdiff(wektor3,wektor4))
length(setdiff(wektor3,wektor4))
length(setdiff(wektor3,wektor4)) == 0
wektor3 = 1:100
wektor4 = 101:200
length(wektor3) == length(wektor4)
wektor3 == wektor4
100:1
wektor3z = scale(wektor3)
wektor4z = scale(wektor4)
#sprawdźmy czy wektory są identyczne za pomocą różnicy zbiorów
length(setdiff(wektor3,wektor4)) == 0
wektor3z = scale(wektor3)
wektor4z = scale(wektor4)
length(setdiff(wektor3z,wektor4z)) == 0
hist(wektor3z)
seq.default(from = -10, to=100, by=0.5)
seq(from = -10, to=100, by=0.5)
seq(from = -10, to=100, by=0.3)
wektor5 = seq(from = -10, to=100, by=0.3)
rep(wektor5, times=10)
wektor6 = rep(wektor5, times=10)
c("10",10,True)
c("10",10,TRUE)
list("10",10,True)
list("10",10,TRUE)
list("10",10,TRUE, 1:100)
lista1 = list("10",10,TRUE, 1:100)
wektor5
wektor6_unq = sort(unique(wektor6))
wektor6_unq
setdiff(wektor5, wektor6) == 0
length(setdiff(wektor5, wektor6)) == 0
length(setdiff(wektor5, wektor6_unq)) == 0
wektor7 = c(1:100, NA, NaN)
wektor7 = c(4:10, NA, NaN)
wektor7
print(mean(wektor7))
print(mean(wektor7), na.rm = T)
print(mean(wektor7, na.rm = T))
print(mean(wektor7, na.rm = 1))
print(sum(wektor7, na.rm = T))
wektor8 = rep(c(1:1000, NA, NaN), 1000)
length(wektor8)
is.na(wektor8)
is.na(wektor8[999:1020])
table(is.na(wektor8))
wektor8[is.na(wektor8)]
wektor8[is.na(wektor8)] = mean(wektor8, na.rm = T)
table(is.na(wektor8))
table(c(1,1,2,2,2))
x = 1000 / 0
x
wektor9 = 1:10
wektor9[1:5]
wektor9[c(1,5,9)]
wektor9[10:1]
wektor9[seq(from=5,to=9, by=2)]
wektor9 + wektor9
wektor9 * wektor9
print(wektor9 + wektor9)
print(wektor9 * wektor9)
lista1 = list("10",10,TRUE, 1:100)
print(lista1)
lista1 = list("10",10,TRUE, 1:100)
print(lista1)
lista1 = list(x="10",y=10,a=TRUE,b= 1:100)
lista1
lista1$x
lista1$b
print(lista1$b)
print(lista1$x)
wektor10 = 1:100
wektor10
wektor10[50:100]
wektor10[50:100] = rep(c(1,16),times=25)
wektor10[51:100] = rep(c(1,16),times=25)
wektor10
rm(wektor8)
wektor8
macierz1 = matrix(1:1000, nrow=100, ncol=10)
View
View(macierz1)
View(macierz1)
macierz1[1,]
macierz1[1:10,]
mtcars
macierz1[1,]
macierz1[c(1,10,21),]
macierz1 * 2
macierz1[,10]
macierz1[,10] = log1p(macierz1[,10])
View(macierz1)
apply(X = macierz1[,1:9], MARGIN = 1, FUN=scale)
apply(X = macierz1[,1:9], MARGIN = 0, FUN=scale)
apply(X = macierz1[,1:9], MARGIN = 1, FUN=scale)
macierz1_norm = apply(X = macierz1[,1:9], MARGIN = 1, FUN=scale)
View(macierz1_norm)
macierz1_norm = apply(X = macierz1[,1:9], MARGIN = 2, FUN=scale)
macierz1_norm[,10]
macierz1_norm[,10]= macierz1[,10]
cbind(macierz1_norm, macierz1[,10])
rbind(macierz1_norm, macierz1[,10])
macierz1_norm_10c = cbind(macierz1_norm, macierz1[,10])
str(macierz1_norm_10c)
summary(macierz1_norm_10c)
c <- 1-
-
q
c <- 10
c = 1-
c
c = 10
c <- 10
#tutaj zapiszemy nasz kod
obiekt1 = 10
obiekt2 = log1p(obiekt1)^2
obiekt3 = round(obiekt2, 0)
obiekt4 = obiekt3 > obiekt2
obiekt5 = FALSE*obiekt4
#pomoc dot. funkcji
?log1p
help("round")
#obiekty mogą być tekstowe
zdanie1 = "Ala ma"
zdanie2 = "kota"
zdanie3 = paste(zdanie1, zdanie2, sep=" ")
zdanie3_male = tolower(zdanie3)
zdanie3_duze = toupper(zdanie3)
#konwersja typów
obiekt6 = "12"
obiekt7 = 12
print(obiekt6+1)
print(obiekt7+1)
obiekt6_liczbowy = as.integer(obiekt6)
print(obiekt6_liczbowy+1)
zdanie4 = paste(zdanie3,"oraz",as.character(3),"psy", sep=" ")
#zadanie 1
x1= 1000
x2 = "50"
x3 = TRUE
x4 = "Choć mieli do pokonania"
#używając funkcji paste, as.character, as.intiger połącz obiekty w jedno zdanie dodając własny tekst
#wektory i listy
wektor1 = c(1,2,3,4,5,10,50,80,1000)
print(sum(wektor1))
print(mean(wektor1))
print(median(wektor1))
hist(wektor1)
#operacja matematyczna na całym wektorze
wektor2 = log1p(wektor1)
#standaryzacja zmiennych z użyciem funkcji scale
wektor3 = 1:100
wektor4 = 101:200
length(wektor3) == length(wektor4)
wektor3 == wektor4
wektor3z = scale(wektor3)
wektor4z = scale(wektor4)
#sprawdźmy czy wektory są identyczne za pomocą różnicy zbiorów
length(setdiff(wektor3z,wektor4z)) == 0
#sekwencje i powtórzenia
wektor5 = seq(from = -10, to=100, by=0.3)
wektor6 = rep(wektor5, times=10)
wektor6_unq = sort(unique(wektor6))
length(setdiff(wektor5, wektor6_unq)) == 0
#obsługa braków danych
wektor7 = c(4:10, NA, NaN)
print(mean(wektor7))
print(mean(wektor7, na.rm = T))
print(sum(wektor7, na.rm = T))
#zastępowanie braków danych
wektor8 = rep(c(1:1000, NA, NaN), 1000)
is.na(wektor8[999:1020])
#sprawdźmy ile mamy braków danych
table(is.na(wektor8))
#zastąpmy je średnią
wektor8[is.na(wektor8)] = mean(wektor8, na.rm = T)
table(is.na(wektor8))
#usunięcie obiektu (bezpowrotne!!!)
rm(wektor8)
#jeszcze trochę operacji na wektorach
wektor9 = 1:10
wektor9[1:5]
wektor9[c(1,5,9)]
wektor9[10:1]
wektor9[seq(from=5,to=9, by=2)]
print(wektor9 + wektor9)
print(wektor9 * wektor9)
#nadpisanie fragmentu wektora
wektor10 = 1:100
wektor10[51:100] = rep(c(1,16),times=25)
#lista
lista1 = list(x="10",y=10,a=TRUE,b= 1:100)
print(lista1)
print(lista1$x)
print(lista1$b)
#macierze i tabele danych
macierz1 = matrix(1:1000, nrow=100, ncol=10)
View(macierz1)
#wyświetlimy pierwszy wiersz
macierz1[1,]
#wiersze 1,10,21
macierz1[c(1,10,21),]
#zastąpimy 10 kolumnę logarytmem z jej wartości
macierz1[,10] = log1p(macierz1[,10])
View(macierz1)
#znormalizujmy pierwsze 9 kolumn :) - skorzystajmy z funkcji apply (nieprawdopodobnie przydatna)
macierz1_norm = apply(X = macierz1[,1:9], MARGIN = 2, FUN=scale)
#ale brakuje nam 10 kolumny z poprzedniej - uzupełnijmy to
macierz1_norm_10c = cbind(macierz1_norm, macierz1[,10])
str(macierz1_norm_10c)
summary(macierz1_norm_10c)
sekwencja1 = seq(0,1,0.1)
sekwencja1
dane = sample(sekwencja1,size=10000, replace=T)
dane = sample(sekwencja1,size=100000, replace=T)
macierz2 = matrix(dane, nrow=100, ncol=1000)
print(str(macierz2))
for (i in 1:ncol(macierz2)){
macierz2[,i]= scale(log1p(macierz2[,i]))
}
macierz2[1:10,1:10]
macierz2 = matrix(dane, nrow=100, ncol=1000)
print(str(macierz2))
macierz2[1:10,1:10]
for (i in 1:ncol(macierz2)){
macierz2[,i]= scale(log1p(macierz2[,i]))
}
macierz2[1:10,1:10]
#resetujemy macierz
macierz2 = matrix(dane, nrow=100, ncol=1000)
macierz2[1:10,1:10]
while (i<=ncol(macierz2)){
macierz2[,i]= scale(log1p(macierz2[,i]))
#bardzo ważny element pętli WHILE poniżej
i=i+1
}
macierz2[1:10,1:10]
i=1
while (i<=ncol(macierz2)){
macierz2[,i]= scale(log1p(macierz2[,i]))
#bardzo ważny element pętli WHILE poniżej
i=i+1
}
macierz2[1:10,1:10]
macierz2[1:10,1:10]
#resetujemy macierz
macierz2 = matrix(dane, nrow=100, ncol=1000)
macierz2[1:10,1:10]
macierz2[1:10,1:10]
while (1==1){
macierz2[,i]= scale(log1p(macierz2[,i]))
#bardzo ważny element pętli WHILE poniżej
i=i+1
#dodajemy break
if (i>ncol(macierz2)) break
}
macierz2[1:10,1:10]
while (1==1){
macierz2[,i]= scale(log1p(macierz2[,i]))
#bardzo ważny element pętli WHILE poniżej
i=i+1
#dodajemy break
if (i>ncol(macierz2))0 {break}
}
macierz2[1:10,1:10]
i=1
while (1==1){
macierz2[,i]= scale(log1p(macierz2[,i]))
#bardzo ważny element pętli WHILE poniżej
i=i+1
#dodajemy break
if (i>ncol(macierz2))0 {break}
}
macierz2[1:10,1:10]
while (1==1){
macierz2[,i]= scale(log1p(macierz2[,i]))
#bardzo ważny element pętli WHILE poniżej
i=i+1
#dodajemy break
if (i>ncol(macierz2)) {break}
}
macierz2[1:10,1:10]
install.packages("car")
library(car)
x = c(1,2,3,4)
recode(x,'1=2','2=3')
recode(x,'1=2; 2=3')
recode(x,'1=2; 2=3; 3=4; 4=1')
recode(x,'<=1=2; 2=3; 3=4; 4=1')
recode(x,'1=2; 2=3; 3=4; 4=1')
